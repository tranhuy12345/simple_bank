// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const listQuery = `-- name: ListQuery :many
SELECT accounts.id, owner, balance, currency, accounts.created_at, entries.id, account_id, amount, entries.created_at
FROM accounts
LEFT JOIN entries
ON accounts.id = entries.account_id
`

type ListQueryRow struct {
	ID          int64         `json:"id"`
	Owner       string        `json:"owner"`
	Balance     int64         `json:"balance"`
	Currency    string        `json:"currency"`
	CreatedAt   sql.NullTime  `json:"created_at"`
	ID_2        sql.NullInt64 `json:"id_2"`
	AccountID   sql.NullInt64 `json:"account_id"`
	Amount      sql.NullInt64 `json:"amount"`
	CreatedAt_2 sql.NullTime  `json:"created_at_2"`
}

func (q *Queries) ListQuery(ctx context.Context) ([]ListQueryRow, error) {
	rows, err := q.db.QueryContext(ctx, listQuery)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListQueryRow{}
	for rows.Next() {
		var i ListQueryRow
		if err := rows.Scan(
			&i.ID,
			&i.Owner,
			&i.Balance,
			&i.Currency,
			&i.CreatedAt,
			&i.ID_2,
			&i.AccountID,
			&i.Amount,
			&i.CreatedAt_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
